# peppy Copyright (c) 2006-2010 Rob McMullen
# Licenced under the GPLv2; see http://peppy.flipturn.org for more info
"""Graphviz DOT Language editing support.

L{Graphviz<http://graphviz.org/>} is a high quality open source
program to automatically layout directed and undirected graphs from a
text description of the node and edge relationships.  The description
language is called L{DOT<http://graphviz.org/doc/info/lang.html>} and
in most cases is generated by a program.  It is rare to write one by
hand, but when you have to, this mode is helpful.
"""

import os,struct
import keyword
from cStringIO import StringIO

import wx
import wx.stc

import peppy.vfs as vfs

from peppy.yapsy.plugins import *
from peppy.lib.bitmapscroller import *
from peppy.lib.processmanager import ProcessManager, JobOutputMixin
from peppy.actions import *
from peppy.major import *
from peppy.editra.style_specs import unique_keywords
from peppy.fundamental import FundamentalMode
from peppy.lib.wxgc_xdot import WxDotWindow
from peppy.lib.fortran_static import FortranStaticAnalysis
import peppy.third_party.gprof2dot as gprof2dot

_sample_file = """// Sample graphviz source file
digraph G {
   Hello->World;
   peppy->"is here";
}
"""

class SampleDot(SelectAction):
    """Open a sample Graphviz file"""
    name = "&Open Sample Graphviz dot file"
    default_menu = "&Help/Samples"

    def action(self, index=-1, multiplier=1):
        self.frame.open("about:sample.dot")


class GraphvizLayout(RadioAction):
    """Dot layout engine""" 
    name = "Layout Engine"
    default_menu = ("Graphviz", 500)

    items = ['dot', 'neato', 'twopi', 'circo', 'fdp', 'sfdp']

    def getIndex(self):
        filt = self.mode.classprefs.layout
        try:
            return self.items.index(filt)
        except:
            return 0

    def getItems(self):
        return self.__class__.items

    def action(self, index=-1, multiplier=1):
        self.mode.classprefs.layout = self.items[index]


class GraphvizOutputFormat(RadioAction):
    """File format to save output image""" 
    name = "Image Format"
    default_menu = ("Graphviz", 500)

    items = ['xdot', 'eps', 'gif', 'jpg' ,'pdf', 'png', 'ps', 'svg']

    def getIndex(self):
        format = self.mode.classprefs.layout
        try:
            return self.items.index(format)
        except:
            return 0

    def getItems(self):
        return self.__class__.items

    def action(self, index=-1, multiplier=1):
        self.mode.classprefs.graphic_format = self.items[index]


class GraphvizMode(FundamentalMode):
    """Major mode for editing Graphviz .dot files.

    Uses the C++ mode of the STC to highlight the files, since
    graphviz .dot files are similar in structure to C++ files.
    """
    keyword = 'Graphviz'
    editra_synonym = 'DOT'
    stc_lexer_id = wx.stc.STC_LEX_CPP
    start_line_comment = u'//'
    end_line_comment = ''
    icon='icons/graphviz.png'


    default_classprefs = (
        StrParam('extensions', 'dot', fullwidth=True),
        StrParam('keyword_set_0', unique_keywords[126], hidden=False, fullwidth=True),
        StrParam('keyword_set_1', unique_keywords[127], hidden=False, fullwidth=True),

        StrParam('graphic_format', 'xdot'),
        StrParam('layout', 'dot'),
        SupersededParam('output_log')
        )

    def getInterpreterArgs(self):
        self.dot_output = vfs.reference_with_new_extension(self.buffer.url, self.classprefs.graphic_format)
        args = "%s -T%s -K%s" % (self.classprefs.interpreter_args, self.classprefs.graphic_format, self.classprefs.layout)
        return args

    def getJobOutput(self):
        return self
    
    def startupCallback(self, job):
        self.process = job
        self.preview = StringIO()

    def stdoutCallback(self, job, text):
        self.preview.write(text)

    def stderrCallback(self, job, text):
        dprint("got stderr: %d bytes" % len(text))

    def finishedCallback(self, job):
        """Callback from the JobOutputMixin when the job terminates."""
        del self.process
        fh = vfs.open_write(self.dot_output)
        fh.write(self.preview.getvalue())
        fh.close()
        self.frame.findTabOrOpen(self.dot_output)


class XDotMode(WxDotWindow, STCInterface, MajorMode):
    """
    Major mode for viewing images.  Eventually this may contain more
    image manipulation commands like rotation, reflection, zooming,
    etc., but not pixel editing features.  Pixel editing features will
    mean that the image will have to be decompressed into raw pixels.
    This mode leaves the image in its native format.
    """
    keyword="XDot"
    icon='icons/graphviz.png'

    default_classprefs = (
        StrParam('extensions', 'xdot', fullwidth=True),
        )

    def __init__(self, parent, wrapper, buffer, frame):
        MajorMode.__init__(self, parent, wrapper, buffer, frame)
        WxDotWindow.__init__(self, parent, -1)
        self.update()
        
    def update(self):
        bytes = self.buffer.stc.GetBinaryData()
        #dprint(repr(bytes))
        self.set_xdotcode(bytes)


class WxgcGprofColorTheme(gprof2dot.Theme):
    def hsl_to_rgb(self, h, s, l):
        """Convert a color from HSL color-model to RGB.

        See also:
        - http://www.w3.org/TR/css3-color/#hsl-color
        """

        h = h % 1.0
        s = min(max(s, 0.0), 1.0)
        l = min(max(l, 0.0), 1.0)

        if l <= 0.5:
            m2 = l*(s + 1.0)
        else:
            m2 = l + s - l*s
        m1 = l*2.0 - m2
        r = self._hue_to_rgb(m1, m2, h + 1.0/3.0)
        g = self._hue_to_rgb(m1, m2, h)
        b = self._hue_to_rgb(m1, m2, h - 1.0/3.0)

        return (int(r * 255), int(g * 255), int(b * 255), 255)

TEMPERATURE_COLORMAP = WxgcGprofColorTheme(
    mincolor = (2.0/3.0, 0.80, 0.25), # dark blue
    maxcolor = (0.0, 1.0, 0.5), # satured red
)

class StaticAnalysisRankDir(RadioAction):
    """Direction of directed graphs """ 
    name = "Graph Layout Direction"
    default_menu = ("Graphviz", 500)

    items = ['TB', 'LR', 'BT', 'RL']

    def getIndex(self):
        format = self.mode.classprefs.rankdir
        try:
            return self.items.index(format)
        except:
            return 0

    def getItems(self):
        return self.__class__.items

    def action(self, index=-1, multiplier=1):
        self.mode.classprefs.rankdir = self.items[index]
        self.mode.updateGraph()


class StaticAnalysisMode(XDotMode):
    """
    Major mode for static analysis.  Uses the WxDotWindow as the root window,
    interfacing with the static analysis through the Dot rendering.
    """
    keyword="StaticAnalysis"
    icon='icons/graphviz.png'

    default_classprefs = (
        StrParam('extensions', 'static_analysis', fullwidth=True),
        StrParam('layout', 'dot'),
        StrParam('rankdir', 'TB'),
        FloatParam('gprof_node_thresh', 0.0, help="Ignore gprof functions with total time below this threshold (percentage)"),
        FloatParam('gprof_edge_thresh', 0.0, help="Ignore gprof calls with total time below this threshold (percentage)"),
        )

    def __init__(self, parent, wrapper, buffer, frame):
        MajorMode.__init__(self, parent, wrapper, buffer, frame)
        WxDotWindow.__init__(self, parent, -1)
        self.gprof_file = None
        self.gprof = None
        self.tipitem = None
        self.register_select_callback(self.nodeSelectCallback)
        self.update()
        
    def update(self):
        bytes = self.buffer.stc.GetBinaryData()
        self.sa = FortranStaticAnalysis(pickledata=bytes)
        self.sa.summary()
        self.updateGraph()
    
    def updateGraph(self):
        fh = StringIO()
        self.sa.makeDot(fh=fh, rankdir=self.classprefs.rankdir)
        stdin = fh.getvalue()
        output = JobOutputSaver(self.regenerateFinished)
        cmd = "%s %s -Txdot -K%s" % (GraphvizMode.classprefs.interpreter_exe, GraphvizMode.classprefs.interpreter_args, self.classprefs.layout)
        ProcessManager().run(cmd, self.buffer.cwd(), output, stdin=stdin)
    
    def regenerateFinished(self, output):
        if output.exit_code == 0:
            self.set_xdotcode(output.getOutputText())
            self.zoom_to_fit()
            self.showGprof("/data3/mod6/historical/5.2.1-svn/build-gprof/Eldridge_tape5_Modtran5-original.gprof")
            
        else:
            Publisher().sendMessage('peppy.log.error', output.getErrorText())
    
    def nodeSelectCallback(self, item, event):
        dprint(item.item)
        if self.tipitem != item.item:
            self.tipitem = item.item
            name = self.tipitem.get_text()
            try:
                text = self.getGprofLabel(name)
            except KeyError:
                text = name
            self.setStatusText(text)

    def showGprof(self, filename):
        theme = TEMPERATURE_COLORMAP
        fh = open(filename, 'rb')
        parser = gprof2dot.GprofParser(fh)
        self.gprof = parser.parse()
        self.gprof.prune(self.classprefs.gprof_node_thresh/100.0, self.classprefs.gprof_edge_thresh/100.0)
        self.gprof.by_name = {}
        
        #self.override_pen_by_name(['mdtrn5', 'driver', 'fnames'])
        active = set()
        for function in self.gprof.functions.itervalues():
            if function.name.endswith("_"):
                function.name = function.name[:-1]
                self.gprof.by_name[function.name] = function
                if function.name == "MAIN_":
                    function.name = self.sa.name
                    function.display_time = self.gprof[gprof2dot.TIME]
                    function.events = {}
                if function.weight is not None:
                    weight = function.weight
                else:
                    weight = 0.0
                color = theme.node_bgcolor(weight)
                fontcolor = theme.node_fgcolor(weight)
                    
                #print function.name
                self.override_pen_by_name([function.name], color)
                active.add(function.name)
                
                try:
                    callee = self.sa.callables[function.name]
                    callee.gprof = function
                    #print function.name, callee
                except KeyError:
                    pass
        
        disabled = set(self.sa.getCallableNames()) - active
        self.override_pen_by_name(disabled, dst_edge=True)
    
    def getGprofLabel(self, function_name):
        function = self.gprof.by_name[function_name]
        labels = []
        if function.process is not None:
            labels.append(function.process)
        if function.module is not None:
            labels.append(function.module)
        labels.append(function.name)
        for title, event in ("Cumulative Time", gprof2dot.TOTAL_TIME_RATIO), ("Self Time", gprof2dot.TIME_RATIO):
            if event in function.events:
                label = event.format(function[event])
                labels.append("%s: %s" % (title, label))
        if hasattr(function, "display_time"):
            labels.append(u"Display time: %s" % (function.display_time,))
        elif function.called is not None:
            labels.append(u"Called %u\xd7" % (function.called,))
        return ", ".join(labels)

class GraphvizPlugin(IPeppyPlugin):
    """Graphviz plugin to register modes and user interface.
    """
    def aboutFiles(self):
        return {'sample.dot': _sample_file}
    
    def getMajorModes(self):
        yield GraphvizMode
        yield XDotMode
        yield StaticAnalysisMode
    
    def getActions(self):
        yield SampleDot

    def getCompatibleActions(self, modecls):
        if issubclass(modecls, GraphvizMode):
            yield GraphvizLayout
            yield GraphvizOutputFormat
        if issubclass(modecls, StaticAnalysisMode):
            yield StaticAnalysisRankDir
