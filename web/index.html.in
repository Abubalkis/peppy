<span class="peppy">(ap)<b>P</b>roximated (x)<b>E</b>macs <b>P</b>owered by <b>Py</b>thon.</span>

<P>-- an XEmacs-like editor in Python.  Eventually.

<P>Latest version: $version "$codename".  <a href="download.html">Download here</a>

<P>This project started out as my graduate school thesis, built
as an educational experiment to attempt to demonstrate the <a
href="pm/">modern software development process</a> using the <a
href="http://readyset.tigris.org/">ReadySET project management templates</a>.
However, the code that started out as a means-to-an-end has grown beyond its
original purpose of demonstrating the software development process.  It's now
quite usable and useful.

<P>I suppose you're thinking that the world doesn't need another editor, and
you might even be right.  In fact, a <a href="http://www.xemacs.org">really
good editor</a> does already exist, but I'm not just trying to create another
editor.  I'm looking for a way to build an extensible framework in Python that
can support editing and viewing many different types of files, not <i>just</i>
text files or source code.  But, having said that, the primary target is still
source code editing; however, unlike other editors I'm not <i>limiting</i>
myself to that, as evidenced by the hex edit mode and other esoteric modes
like the hyperspectral image viewer.

<h3>Features</h3>

<ul>
<li>Multiple top-level windows
<li>Multiple language support: currently baseline implementations of Python, Makefile, C/C++ major modes
<li>Multiple views of the same file (edit in one view and changes are reflected in realtime in the others, even if the others are different major modes!)
<li>Virtual file system abstraction layer based on <a href="http://www.ikaaro.org/itools/">itools.vfs</a>, allowing transparent file loads from the local file system, http URLs, and from within tar archives without uncompressing the archive beforehand.
<li>Minibuffer ala XEmacs, including tab completion
<li>Other interesting major modes:
<ul>
<li>Hex edit mode
<li>Hyperspectral image view mode
<li>Music Player Daemon mode for controlling an
<a href="http://mpd.wikia.com/wiki/Main_Page">MPD</a> server
<li>Dired mode for viewing directories
</ul>
</ul>

<h3>Development features</h3>
<ul>
<li>Pure python source based on the <a href="http://www.wxpython.org">wxPython</a> widget toolkit
<li>Most features coded as plugins - can enable or disable individual features at will
<li>Scintilla styling code borrowed from <a href="http://www.editra.org">Editra</a>
and I will continue to track Editra as more language lexers are supported
</ul>

<h3>Help Wanted</h3>

<P>I'm especially interested in help with the Mac OSX testing.  I regularly test
on Windows and Linux, but don't have access to a Mac.  I'd appreciate any help
in debugging on the Mac, as I believe there's still a problem in the keyboard
handling on OSX.

<h3>Mailing List</h3>

<P>There's now a <a href="http://groups.google.com/group/peppy-dev">mailing
list</a> for peppy development.  All people interested in the development of
peppy are welcome to join.

<h3>License</h3>

<P>The application as a whole is licensed under the GPLv3 due to the inclusion
of <a href="http://www.ikaaro.org/itools/">itools</a>.  The bulk of the code
in peppy was written by me and is also available under either the GPLv2 or
wxWidgets depending on the individual source file.  Consult the header of each
file for the specific license.

<P>So, if you're going to borrow the whole application, it's under the GPLv3.
However, if you're just going to borrow an individual source file from
one of the files that I've written outside of itools, you get to choose the
license from one of the following dual license pairs: either GPLv2/GPLv3 or
wxWidgets/GPLv3.
